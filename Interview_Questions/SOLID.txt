The SOLID principles are a set of five design principles that aim to guide developers in writing maintainable
and scalable software. These principles were introduced by Robert C. Martin (also known as Uncle Bob) and are
widely regarded as fundamental principles in object-oriented programming. Each principle focuses on a specific
aspect of software design and promotes loose coupling, high cohesion, and flexibility.

1. Single Responsibility Principle (SRP): This principle states that a class should have only one reason to change,
meaning it should have a single responsibility. Each class should encapsulate a single concept or behavior. By adhering
to SRP, you achieve high cohesion, as classes are focused and have well-defined responsibilities. This principle
helps make classes more maintainable, testable, and less prone to bugs.

2. Open-Closed Principle (OCP): The OCP states that software entities (classes, modules, functions) should be open for
extension but closed for modification. In other words, you should be able to extend the behavior of a system without
modifying its existing code. This can be achieved through the use of abstraction, interfaces, and polymorphism.
By adhering to OCP, you can introduce new features or behaviors without risking unintended side effects in existing code.

3. Liskov Substitution Principle (LSP): The LSP states that objects of a superclass should be substitutable with
objects of its subclasses without affecting the correctness of the program. In other words, subclasses should be
able to be used interchangeably with their base class without breaking the expected behavior. Adhering to LSP ensures
that your code is compatible with polymorphism and inheritance, promoting flexibility and extensibility.

4. Interface Segregation Principle (ISP): The ISP states that clients should not be forced to depend on interfaces
they do not use. It encourages the creation of fine-grained, specific interfaces rather than having a single large
interface. By adhering to ISP, you avoid coupling clients to unnecessary dependencies and reduce the impact of changes
to interfaces. This principle promotes the idea of "interface contracts" that are tailored to the needs of specific
clients.

5. Dependency Inversion Principle (DIP): The DIP states that high-level modules should not depend on low-level modules.
Both should depend on abstractions. It also states that abstractions should not depend on details; details should
depend on abstractions. By adhering to DIP, you promote loose coupling and dependency injection. This principle allows
for easier testing, modularity, and flexibility by decoupling modules from concrete implementations.

By applying these SOLID principles, developers can design software that is modular, extensible, and easier to maintain.
The principles help promote code reusability, testability, and adaptability to changing requirements, resulting in
more robust and scalable software systems.

------------------------------------------------------------------------------------------------------------------------


Explain the Interface Segregation Principle (ISP) and the Dependency Inversion Principle (DIP) with examples:

1. Interface Segregation Principle (ISP):
The Interface Segregation Principle states that clients should not be forced to depend on interfaces they do not use.
It encourages the creation of fine-grained, specific interfaces rather than having a single large interface that
encompasses all possible behaviors. By adhering to ISP, you avoid unnecessary dependencies and reduce the impact of
changes to interfaces.

Example:
Suppose you are building a system for managing different types of documents: text documents, spreadsheets, and
presentations. You define an interface called `Document` to handle common operations across all document types,
such as `open()`, `close()`, and `save()`. However, you realize that not all document types support the same
operations. Spreadsheets, for example, do not have the concept of pages.

By applying ISP, you can break down the `Document` interface into smaller, more specific interfaces. For instance,
you could define `Printable` for documents that support printing, `Savable` for documents that can be saved, and
`Pageable` for documents that have pages. Each document type can then implement only the interfaces that are
applicable to them. This way, clients can depend on the interfaces they need, and you avoid forcing them to
implement or use unnecessary methods.

2. Dependency Inversion Principle (DIP):
The Dependency Inversion Principle states that high-level modules should not depend on low-level modules.
Both should depend on abstractions. It also states that abstractions should not depend on details; details
should depend on abstractions. By adhering to DIP, you promote loose coupling and dependency injection, allowing for
easier testing, modularity, and flexibility.

Example:
Consider a scenario where you have a `NotificationService` class responsible for sending notifications. Initially,
the `NotificationService` directly depends on a specific implementation, such as an `EmailSender` class. This creates
a tight coupling between the `NotificationService` and the `EmailSender`.

By applying DIP, you can introduce an abstraction, such as an `INotificationSender` interface, that both the
`NotificationService` and the `EmailSender` implement. The `NotificationService` can then depend on the abstraction
rather than the concrete implementation. This allows for flexibility and easy substitution of different notification
sending mechanisms. For example, you can introduce a `SMSSender` class implementing `INotificationSender` and
configure the `NotificationService` to use it instead of the `EmailSender`. The high-level module (NotificationService)
is no longer directly dependent on the low-level module (EmailSender), but both depend on the
abstraction (INotificationSender).

By adhering to DIP, you achieve loose coupling, modular design, and the ability to easily swap implementations without
affecting the core functionality of the high-level module.

Both ISP and DIP promote modular, flexible, and maintainable code by reducing dependencies and decoupling components.
They help improve code reusability, testability, and adaptability to changes in requirements or technology.